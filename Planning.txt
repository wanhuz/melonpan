FYP Plan: OCR Japanese to English translation

Utilizing OCR for language learning

0. Approval
	- How do I get approval for my project?
	- 
1. Break down Kanjitomo
	- What algorithm they use? - Pattern Recognition
	- What language/oop they use? - Java
	- Why performance is bad?
	- What is lacking in UI? - Minimalism mode to not obstruct learning, assumed that user know what button does what
	- What it should have but do not have? - always on japanese input, or toggle to japanese input
	- How do language learner learns thing this day? 
	- What is unnecessary and clutter? - unnecessary book viewer, assumption that user learn through list
2. Crack down a plan
	- What is the purpose of this project? x
	- What is non-negotiable requirement? x 
	- What is essential requirement? x
	- What is nonessential requirement? x
	- What language is the most suitable? x - C++ because performance
	- What is my project scope?
	- What algorithm is the best to be better than Kanjitomo? x - LSTM
	- What algorithm is currently the best in the world right now? x - LSTM's Tesseract
	- What I need to know?
	- What don't I need to know for now? 
	- What tool is the best for the task?
	- What is my schedule?
3. New Question
	- How to branding my application?
	- How do I get around Qt UI limitation? -alw on top -sidebar
	- How do I provide minimalist UI?
	- Is JMDict best dictionary? X -No other alternative -other alternative can be done via send to link
	
Project purpose:
	- To create a better Japanese Recognition software than KanjiTomo
	- To expand the scope of current OCR lookup tool - beyond web browser, image scanning.. but on desktop.
	- To create OCR lookup tool that work side-by-side with OS, yet not unnecessarily clutter the screen by blocking reading activity
	- To create an education tool for Japanese learner 
	- To create a J-E dictionary by utilizing Optical Character Recognition
 
Non-negotiable requirements:
	- Optical Recognition for Japanese character
		- Image text
		- Digital text
	- J-E Dictionary
  
Essential requirements: 
	- High performance
	- Error-correction


 Throw around idea:
  - Conceptualize minimalism mode as subtitle
  - How to correct mistake in fullscreen mode?
  - How do you fix mistake cause by incorrect recognition, manually?
	x. Manual input based on experience
	x. Provide kanji text boxes showing different probability of the predicted word
	x. 
  - Improve performance by caching recently looked up word 

What cannot be done? (Now or future)
  - OCR lookup of unclear defined text, e,g, text without clear border, weird font, etc. Hard enough preprocessing for this task. Best case is flat background.
  - Anime subtitle lookup, unless subtitle is surrounded by black fill, i,e, flat color
  - J-J Dictionary
  - More than one dictionary
 
What is unnecessary and clutter?
  - It should not be a book/comic viewer
  - Zoom should not be two-step job
  - Switching between name is nice, but its still beg down the question: which name is correct? Name depend on context tbh. Even Japanese person cannot read name unless specified.
  - Ignore educational methodology (for now)
  
What I need to know?
  - C++ language knowledge, or how to optimize C++
  - Qt
  - Different task before OCR, preprocessing, segmentation, etc
  - Background knowledge of effective OCR
  
What need further research for this plan?
  - Different type of use-case
	- Different font
	- Different font size
  - Best dictionary?
	- Wisdom, JMEdict, etc
  - How to capture text? 
  
Project Scope:
  - Use case: Visual novel, light novel, manga.
  - Focus on being a dictionary.
  - Focus on digital and image format.
  - 
  
Core class:
  - User Interface
  - OCR engine
  - Dictionary
  - Text capture engine
  - Controller



Progress:
	1 Design UI
	2 Complete core classes and functional
	3 
	
Extra features:
	1. Audio read
	2. Subtitle mode
	3. Word history 
	4. Multi dictionary